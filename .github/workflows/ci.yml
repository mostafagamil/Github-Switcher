name: CI

on:
  push:
    branches: [ master, main, development ]
  pull_request:
    branches: [ master, main ]

env:
  PYTHON_VERSION: "3.10"

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Verify Git is available
      run: git --version

    - name: Install dependencies
      run: |
        uv sync --dev --locked

    - name: Run type checking
      run: |
        uv run mypy src/

    - name: Run linting
      run: |
        uv run ruff check src/ tests/

    - name: Run tests with coverage
      run: |
        uv run python -m pytest tests/ --cov=github_switcher --cov-report=term-missing --cov-report=xml -v

    - name: Upload coverage reports
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        fail_ci_if_error: false
      timeout-minutes: 2

  security:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --dev --locked

    - name: Run security scan
      run: |
        uv run bandit -r src/ -f json -o bandit-report.json || true
        uv run safety check --json --output safety-report.json || true

    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security]
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Install UV
      uses: astral-sh/setup-uv@v3

    - name: Set up Python
      run: uv python install ${{ env.PYTHON_VERSION }}

    - name: Install dependencies
      run: uv sync --locked

    - name: Build package
      run: |
        uv build

    - name: Check build artifacts
      run: |
        ls -la dist/
        uv run python -m twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/